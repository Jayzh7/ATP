% two components both need the same message

sort 
  Speed = Nat;

  Pulses = struct sixty | eighty | onethirty | oneforty | special | beacon | none;
  Track  = struct ATPArea | ERTMSArea;
  Country = struct NL | BE;
  BellState = struct bellOn | bellOff;
  BrakeStatus = struct braking | emergencyBrake | releasing;
  TrainType = struct freight | other;
  ATPStatus = struct active | inactive | pause; % The ATP will come to a pause status after an emergency brake

  Train = 
    struct train_info(
      bell: BellState,
      brake: BrakeStatus,
      type: TrainType,
      ATP: ATPStatus,
      country: Country,
      cspeed : Speed,
      aspeed : Speed
    );

map 
  init_train : Train;

eqn 
  init_train = train_info(bellOff, releasing, other, active, NL, 0, 0);

map
  extra_freight : Nat;

  no_signal: Speed;
  map_speed_limit: Pulses # Country -> Speed;

  is_bell_ringing: Train -> Bool;
  is_brake_applying: Train -> Bool;
  is_freight: Train -> Bool;
  is_ATPactive: Train -> Bool;
  is_ATPpaused: Train -> Bool;
  in_what_country: Train -> Country;
  is_speeding: Train -> Bool;
  is_stopped : Train -> Bool;
  
  update_bell: Train # BellState -> Train;
  update_brake: Train # BrakeStatus -> Train;
  update_type: Train # TrainType -> Train;
  update_ATP: Train # ATPStatus -> Train;
  update_country: Train # Country -> Train;
  update_cspeed : Train # Speed -> Train;
  update_aspeed : Train # Speed -> Train;

var 
  v_train : Train;
  v_bell : BellState;
  v_brake : BrakeStatus;
  v_type : TrainType;
  v_atp : ATPStatus;
  v_country: Country;
  v_aspeed : Speed;
  v_cspeed : Speed;

eqn
  % The driver is allowed to release the brake when the train speed is below allowed speed + extra_freight
  extra_freight = 20;

  is_bell_ringing(v_train) = bell(v_train) == bellOn;
  is_brake_applying(v_train) = brake(v_train) == braking;
  is_freight(v_train) = type(v_train) == freight;
  is_ATPactive(v_train) = ATP(v_train) == active;
  is_ATPpaused(v_train) = ATP(v_train) == pause;
  is_speeding(v_train) = (cspeed(v_train) > aspeed(v_train));
  is_stopped(v_train) = (cspeed(v_train) == 0);
  % -> is not allowed in 'eqn' ?
  %is_allowed_to_release(v_train) = (is_freight(v_train) -> (cspeed(v_train) < (aspeed(v_train) + extra_freight)) <> (cspeed(v_train) < aspeed(v_train));

  update_bell(v_train, v_bell) = train_info(v_bell, brake(v_train), type(v_train), ATP(v_train), country(v_train), cspeed(v_train), aspeed(v_train));
  update_brake(v_train, v_brake) = train_info(bell(v_train), v_brake, type(v_train), ATP(v_train), country(v_train), cspeed(v_train), aspeed(v_train));
  update_type(v_train, v_type) = train_info(bell(v_train), brake(v_train), v_type, ATP(v_train), country(v_train), cspeed(v_train), aspeed(v_train));
  update_ATP(v_train, v_atp) = train_info(bell(v_train), brake(v_train), type(v_train), v_atp, country(v_train), cspeed(v_train), aspeed(v_train));
  update_country(v_train, v_country) = train_info(bell(v_train), brake(v_train), type(v_train), ATP(v_train), v_country, cspeed(v_train), aspeed(v_train));
  update_cspeed(v_train, v_cspeed) = train_info(bell(v_train), brake(v_train), type(v_train), ATP(v_train), country(v_train), v_cspeed, aspeed(v_train));
  update_aspeed(v_train, v_aspeed) = train_info(bell(v_train), brake(v_train), type(v_train), ATP(v_train), country(v_train), cspeed(v_train), v_aspeed);

%  update
  no_signal = 40;
  map_speed_limit(sixty, NL) = 60;
  map_speed_limit(eighty, NL) = 80;
  map_speed_limit(onethirty, NL) = 130;
  map_speed_limit(oneforty, NL) = 140;
  map_speed_limit(none, NL) = 40;
  % Road condition in BE may not be as good as in NL.
  map_speed_limit(sixty, BE) = 50;
  map_speed_limit(eighty, BE) = 70;
  map_speed_limit(onethirty, BE) = 120;
  map_speed_limit(oneforty, BE) = 130;
  map_speed_limit(none, BE) = 30;

act

  reset_pressed , reset_command , reset_ATP;

  % speed limit related actions
  send_limit, receive_limit_g, receive_limit_a, transmit_speed_limit: Speed;

  send_speed_code , receive_speed_code , transmit_speed_code : Pulses;
  
  % current speed related actions
  receive_current_speed_g, receive_current_speed_a, send_current_speed, transmit_current_speed: Speed;
  
  % pulses 
  send_pulses, receive_pulses, transmit_speed_pulses: Pulses; 

  % bell control
  bell_ring, bell_stop;
  send_bell_state, receive_bell_state, transmit_bell_state: BellState;

  % running status indicator
  speeding, safe_speed;

  % ATP status 
  send_ATP_status, receive_ATP_status, transmit_ATP_status : ATPStatus;

  % brake status message from ERTMS	
  send_brake_status, receive_brake_status, transmit_brake_status : BrakeStatus; 
  % train type message from ERTMS
  send_train_type, receive_train_type, transmit_train_type: TrainType;
  receive_track_type, send_track_type, transmit_track_type: Track;
  send_country, receive_country, transmit_country : Country;
  send_bell_expired, receive_bell_expired, transmit_bell_expired;
  leave_ERTMS, enter_ERTMS;

  % to ERTMS
  send_allowed_speed_ERTMS : Speed;
  instru_emergency_brake, receive_emergency_brake, transmit_emergency_brake;
  emergency_brake, bell_reminder;

  ATPActive, ATPInactive;

proc 
  Antenna = 
    receive_pulses(sixty).send_speed_code(sixty).Antenna+
    receive_pulses(eighty).send_speed_code(eighty).Antenna+
    receive_pulses(onethirty).send_speed_code(onethirty).Antenna+
    receive_pulses(oneforty).send_speed_code(oneforty).Antenna+
    receive_pulses(special).send_speed_code(special).Antenna+
    receive_pulses(beacon).send_speed_code(beacon).Antenna+
    receive_pulses(none).send_speed_code(none).Antenna
  ;

  Track = 
    send_pulses(sixty).Track+
    send_pulses(eighty).Track+
    send_pulses(onethirty).Track+
    send_pulses(oneforty).Track+
    send_pulses(special).Track+
    send_pulses(beacon).Track+
    send_pulses(none).Track
  ;

  

  BellController = 
      receive_bell_state(bellOn).bell_ring.BellController
    + receive_bell_state(bellOff).bell_stop.BellController;

  BrakeController = 
    receive_emergency_brake . send_ATP_status(pause) . emergency_brake . BrakeController;

  ATPpp(pls : Pulses, ctry : Country) = 
    receive_speed_code(sixty) .
      send_limit(map_speed_limit(sixty, ctry)).ATPpp(sixty, ctry)
  + receive_speed_code(eighty) . 
        send_limit(map_speed_limit(eighty, ctry)).ATPpp(eighty, ctry)
  + receive_speed_code(onethirty) .
        send_limit(map_speed_limit(onethirty, ctry)).ATPpp(onethirty, ctry)
  + receive_speed_code(oneforty) . 
        send_limit(map_speed_limit(oneforty, ctry)).ATPpp(oneforty, ctry)
  + receive_country(NL) . ATPpp(pls, NL)
  + receive_country(BE) . ATPpp(pls, BE);
    
    

  % responsible for communicating with ERTMS
  % Receive from ERTMS
  %     * Track type
  %     * reset command
  %     * brake status
  % Receive from ATPpp
  %     * bell status
  %     * brake command
  General(train : Train) = 
  
      sum n : Speed . receive_limit_g(n) . send_allowed_speed_ERTMS(n) . 
        ( (n < cspeed(train)) ->
            safe_speed
        ) .  General(update_aspeed(train, n))
    + sum m : Speed . receive_current_speed_g(m) . 
        ( (is_freight(train) && (m <= (aspeed(train) + extra_freight)) && (m > aspeed(train))) -> bell_reminder )
        . ((m < aspeed(train)) -> safe_speed)
        . General(update_cspeed(train, m))

    + receive_train_type(freight).General(update_type(train, freight))
    + receive_train_type(other).General(update_type(train, other))


    + receive_track_type(ATPArea).leave_ERTMS.send_ATP_status(active)
    + receive_track_type(ERTMSArea).enter_ERTMS.send_ATP_status(inactive)

    + reset_command . is_stopped(train) -> (
        is_ATPpaused(train) -> (
          send_ATP_status(inactive) . General(init_train)
        ) <>
        General(train)
      ) <>
      General(train)

          
    + receive_brake_status(braking) . General(update_brake(train, braking))

    + receive_brake_status(releasing) . 
        % we apply the emergency brake if the driver release the brake when the train is still speeding
        (is_speeding(train) && brake(train) == braking) -> (
          % if the train is a freight train, the driver is allowed to release the brake after a certain time
          ((is_freight(train)==false) || (is_freight(train) && cspeed(train) > (aspeed(train) + extra_freight))) ->(
            instru_emergency_brake.General(update_ATP(train, pause))
          ) <>
          General(update_brake(train, releasing))
        ) <> General(update_brake(train, releasing))
    + receive_bell_expired . ((is_brake_applying(train) == false) && (cspeed(train) > aspeed(train))) ->(
        instru_emergency_brake.General(update_ATP(train, pause))
      ) <> General(train)
    
  ;

  ATP(train : Train) = 
      sum n : Speed . receive_limit_a(n) . ATP(update_aspeed(train, n))
    + sum m : Speed . receive_current_speed_a(m) . ATP(update_cspeed(train, m))

    + receive_ATP_status(active) . ((is_ATPactive(train)==false) && (is_ATPpaused(train)==false)) -> ATP(update_ATP(train, active)) <> ATP(train)
    + receive_ATP_status(inactive) . (is_ATPactive(train) && (is_ATPpaused(train)==false)) -> ATP(update_ATP(train, inactive)) <> ATP(train)
    + (is_ATPactive(train))->(
        is_speeding(train) ->(
           (is_bell_ringing(train)==false) ->(
             speeding . send_bell_state(bellOn) . ATP(update_bell(train, bellOn))
           ) 
        ) 
      ) 
    
  ;

  ERTMS = send_current_speed(50).ERTMS   
        + send_current_speed(0).ERTMS  
        + send_train_type(freight).ERTMS
        + send_train_type(other).ERTMS
        + send_track_type(ATPArea).ERTMS
        + send_track_type(ERTMSArea).ERTMS
        + send_brake_status(braking).ERTMS
        + send_brake_status(releasing).ERTMS
        + send_country(NL).ERTMS
        + send_country(BE).ERTMS
        + reset_pressed.ERTMS
        + send_bell_expired.ERTMS
  ;


  
init
  allow(
    {
      transmit_speed_pulses, ATPActive, ATPInactive, 
      instru_emergency_brake,
      emergency_brake,
      transmit_speed_limit, 
      transmit_current_speed,
      bell_ring, bell_stop, % instructions to ERTMS
      speeding, %test only
      safe_speed,
      transmit_bell_state,
      transmit_brake_status, % no deadlock before adding this one
      transmit_ATP_status,
      transmit_train_type,
      transmit_speed_code,
      transmit_country,
      transmit_bell_expired,
      enter_ERTMS,
      leave_ERTMS,
      reset_ATP,
      bell_reminder,
      send_allowed_speed_ERTMS
    },
    comm(
      { 
        receive_pulses | send_pulses -> transmit_speed_pulses,
        send_speed_code | receive_speed_code -> transmit_speed_code,
        send_limit  | receive_limit_a | receive_limit_g -> transmit_speed_limit,
        send_current_speed | receive_current_speed_a | receive_current_speed_g -> transmit_current_speed,
        instru_emergency_brake | receive_emergency_brake -> transmit_emergency_brake,
        send_ATP_status | receive_ATP_status -> transmit_ATP_status,
        send_bell_state | receive_bell_state -> transmit_bell_state,
        send_brake_status | receive_brake_status -> transmit_brake_status,
        send_train_type | receive_train_type -> transmit_train_type,
        send_track_type | receive_track_type -> transmit_track_type,
        reset_pressed | reset_command -> reset_ATP,
        send_country | receive_country -> transmit_country,
        send_bell_expired | receive_bell_expired -> transmit_bell_expired
      },
      General(init_train) || Antenna || ATP(init_train)   || ERTMS || Track
    )
  );

