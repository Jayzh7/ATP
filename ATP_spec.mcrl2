% how to set a timer of 3 seconds
% can two components share a same action
% need to code for input compoenents?
% how to input the current speed..

sort 
  Speed = Nat;

  Pulses = struct sixty | eighty | onethirty | oneforty | special | beacon | none;
  Track  = struct ATPArea | ERTMSArea;
  Country = struct NL | BE;
  BellState = struct bellOn | bellOff;
  BrakeStatus = struct braking | emergencyBrake | releasing;
  TrainType = struct freight | other;
  ATPStatus = struct active | inactive;

  Train = 
    struct train_info(
      bell: BellState,
      brake: BrakeStatus,
      type: TrainType,
      ATP: ATPStatus,
      country: Country,
      cspeed : Speed,
      aspeed : Speed
      % 
    );

map
  extra_freight : Nat;

  no_signal: Speed;
  map_speed_limit: Pulses # Country -> Speed;

  is_bell_ringing: Train -> Bool;
  is_brake_applying: Train -> Bool;
  is_freight: Train -> Bool;
  is_ATPactive: Train -> Bool;
  in_what_country: Train -> Country;
  is_speeding: Train -> Bool;
  
  update_bell: Train # BellState -> Train;
  update_brake: Train # BrakeStatus -> Train;
  update_type: Train # TrainType -> Train;
  update_ATP: Train # ATPStatus -> Train;
  update_country: Train # Country -> Train;
  update_cspeed : Train # Speed -> Train;
  update_aspeed : Train # Speed -> Train;

var 
  v_train : Train;
  v_bell : BellState;
  v_brake : BrakeStatus;
  v_type : TrainType;
  v_atp : ATPStatus;
  v_country: Country;
  v_aspeed : Speed;
  v_cspeed : Speed;

eqn
  % The driver is allowed to release the brake when the train speed is below allowed speed + extra_freight
  extra_freight = 20;

  is_bell_ringing(v_train) = bell(v_train) == bellOn;
  is_brake_applying(v_train) = brake(v_train) == braking;
  is_freight(v_train) = type(v_train) == freight;
  is_ATPactive(v_train) = ATP(v_train) == active;
  in_what_country(v_train) = country(v_train);   
  is_speeding(v_train) = (cspeed(v_train) > cspeed(v_train));

  update_bell(v_train, v_bell) = train_info(v_bell, brake(v_train), type(v_train), ATP(v_train), country(v_train), cspeed(v_train), aspeed(v_train));
  update_brake(v_train, v_brake) = train_info(bell(v_train), v_brake, type(v_train), ATP(v_train), country(v_train), cspeed(v_train), aspeed(v_train));
  update_type(v_train, v_type) = train_info(bell(v_train), brake(v_train), v_type, ATP(v_train), country(v_train), cspeed(v_train), aspeed(v_train));
  update_ATP(v_train, v_atp) = train_info(bell(v_train), brake(v_train), type(v_train), v_atp, country(v_train), cspeed(v_train), aspeed(v_train));
  update_country(v_train, v_country) = train_info(bell(v_train), brake(v_train), type(v_train), ATP(v_train), v_country, cspeed(v_train), aspeed(v_train));
  update_cspeed(v_train, v_cspeed) = train_info(bell(v_train), brake(v_train), type(v_train), ATP(v_train), country(v_train), v_cspeed, aspeed(v_train));
  update_aspeed(v_train, v_aspeed) = train_info(bell(v_train), brake(v_train), type(v_train), ATP(v_train), country(v_train), cspeed(v_train), v_aspeed);

%  update
  no_signal = 40;
  map_speed_limit(sixty, NL) = 60;
  map_speed_limit(eighty, NL) = 80;
  map_speed_limit(onethirty, NL) = 130;
  map_speed_limit(oneforty, NL) = 140;
  map_speed_limit(none, NL) = 40;

act
  % speed limit related actions
  send_limit, receive_limit, transmit_speed_limit: Speed;

  % current speed related actions
  receive_current_speed, send_current_speed, transmit_current_speed: Speed;
  
  % pulses 
  send_pulses, receive_pulses, transmit_speed_pulses: Pulses; 

  % bell control
  bell_ring, bell_stop;
  send_bell_state, receive_bell_state, transmit_bell_state: BellState;

  % running status indicator
  speeding, safe_speed;

  % ATP status 
  send_ATP_status, receive_ATP_status, transmit_ATP_status : ATPStatus;

  % brake status message from ERTMS	
  send_brake_status, receive_brake_status, transmit_brake_status : BrakeStatus; 
  % train type message from ERTMS
  send_train_type, receive_train_type, transmit_train_type: TrainType;

  instru_emergency_brake, receive_emergency_brake, emergency_brake;

  ATPActive, ATPInactive;

proc 
  Antenna = 
    receive_pulses(sixty).ATPActive.send_ATP_status(active).send_limit(60).Antenna+
    receive_pulses(eighty).ATPActive.send_ATP_status(active).send_limit(80).Antenna+
    receive_pulses(onethirty).ATPActive.send_ATP_status(active).send_limit(130).Antenna+
    receive_pulses(oneforty).ATPActive.send_ATP_status(active).send_limit(140).Antenna+
    receive_pulses(special).ATPInactive.send_ATP_status(inactive).Antenna+
    receive_pulses(beacon).instru_emergency_brake.Antenna+
    receive_pulses(none).ATPActive.send_ATP_status(active).send_limit(no_signal).Antenna
  ;

  Track = 
    send_pulses(sixty).Track+
    send_pulses(eighty).Track+
    send_pulses(onethirty).Track+
    send_pulses(oneforty).Track+
    send_pulses(special).Track+
    send_pulses(beacon).Track+
    send_pulses(none).Track
  ;

  % responsible for communicating with ERTMS
  General(train : Train) = 
      receive_bell_state(bellOn).bell_ring.General(update_bell(train, bellOn))
    + receive_bell_state(bellOff).bell_stop.General(update_bell(train, bellOff))

    % + receive_brake_status(braking) . 
    %     % we stop the bell if the driver begins applying brake after he heard the bell ringing
    %     is_bell_ringing(train) -> (
    %       bell_stop.General(update_bell(train, bellOff))
    %     ) <>
    %     (General(train))
    % + receive_brake_status(releasing) .
    %     % we apply the emergency brake if the driver release the brake when the train is still speeding
    %     is_speeding(train) -> (
    %       % if the train is a freight train, the driver is allowed to release the brake after a certain time
    %       is_freight(train) -> (
    %         instru_emergency_brake
    %       ) <>
    %       (instru_emergency_brake)
    %     )
  ;

  ATPpp(train : Train) = 
     sum n : Speed . receive_limit(n) . ATPpp(update_aspeed(train, n))
    + sum m : Speed . receive_current_speed(m) . ATPpp(update_cspeed(train, m))
    + receive_ATP_status(active) . ATPpp(update_ATP(train, active))
    + receive_ATP_status(inactive) . ATPpp(update_ATP(train, inactive))
    + (is_ATPactive(train))->(
        is_speeding(train) -> 
           (speeding . send_bell_state(bellOn) . ATPpp(train))  
        <> (safe_speed . send_bell_state(bellOff) . ATPpp(train))
     )
  ;

  ERTMS = send_current_speed(50).ERTMS     
        + send_train_type(freight)
        + send_train_type(other)
        + send_brake_status(braking)
        + send_brake_status(releasing)
        
  ;

map 
  init_train : Train;

eqn 
  init_train = train_info(bellOff, releasing, other, inactive, NL, 0, 40);
init
  allow(
    {transmit_speed_pulses, ATPActive, ATPInactive, 
     emergency_brake,
     transmit_speed_limit, 
     transmit_current_speed,
     bell_ring, bell_stop, % instructions to ERTMS
     %send_current_speed,%test only
     speeding, %test only
     safe_speed,
     transmit_bell_state,
     transmit_brake_status,
     transmit_ATP_status,
     transmit_train_type
     },
    comm(
      { receive_pulses | send_pulses -> transmit_speed_pulses,
        send_limit  | receive_limit -> transmit_speed_limit,
        send_current_speed | receive_current_speed -> transmit_current_speed,
        instru_emergency_brake | receive_emergency_brake -> emergency_brake,
        send_ATP_status | receive_ATP_status -> transmit_ATP_status,
        send_bell_state | receive_bell_state -> transmit_bell_state,
        send_brake_status | receive_brake_status -> transmit_brake_status,
        send_train_type | receive_train_type -> transmit_train_type
      },
      General(init_train) || Antenna || Track || ERTMS || ATPpp(init_train)
    )
  );

